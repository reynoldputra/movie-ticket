// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") 
  directUrl         = env("POSTGRES_URL_NON_POOLING") 
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  username     String        @unique
  name         String
  age          Int
  balance      Int
  password     String
  accounts     Account[]
  sessions     Session[]
  tickets      Ticket[]
  transactions Transaction[]
}

// main
model Movie {
  id           Int        @id @default(autoincrement())
  title        String
  slug         String     @unique
  release_date DateTime
  poster_url   String
  price        Int
  age_rating   Int
  description  String     @db.Text
  schedules    Schedule[]
}

model Teater {
  id        Int        @id @default(autoincrement())
  name      String
  city      String
  address   String
  schedules Schedule[]
}

model Schedule {
  id         Int      @id @default(autoincrement())
  teaterId   Int
  time       DateTime
  movieId    Int
  end_date   DateTime
  start_date DateTime
  teater     Teater   @relation(fields: [teaterId], references: [id])
  movie      Movie    @relation(fields: [movieId], references: [id])
  tickets    Ticket[]
}

model Ticket {
  id         String   @id @default(cuid())
  scheduleId Int
  userId     String
  paymentId  String
  date       DateTime
  seat       Int
  user       User     @relation(fields: [userId], references: [id])
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  payment    Payment  @relation(fields: [paymentId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  tickets       Ticket[]
  due_date      DateTime
  userId        String
  status        PaymentStatus
  amount        Int
  transactionId String?       @unique
  transaction   Transaction?  @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id      String          @id @default(cuid())
  date    DateTime        @default(now())
  userId  String
  method  PaymentMethod
  user    User            @relation(fields: [userId], references: [id])
  amount  Int
  type    TransactionType
  payment Payment?
}

// next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PaymentMethod {
  BCA
  QRIS
}

enum TransactionType {
  BUYTICKET @map("Buy Ticket")
  TOPUP     @map("Top Up")
  WITHDRAW  @map("Withdraw")
  NONE      @map("None")
}

enum PaymentStatus {
  WAITING  @map("Waiting")
  FAILED   @map("Failed")
  CANCEL   @map("Canceled")
  COMPLETE @map("Complete")
}
